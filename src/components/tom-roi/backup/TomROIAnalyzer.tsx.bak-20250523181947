import React, { useRef, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useForm, FormProvider } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { useIsMobile } from '@/hooks/use-mobile';
import { useAuth } from '@/hooks/use-auth';
import { Button } from '@/components/ui/button';
import ErrorBoundary from '@/components/ErrorBoundary';
import { ArrowLeft } from 'lucide-react';
import { TomPropertyAnalysisInput, tomPropertyAnalysisSchema, ROIAnalysisResult, PropertyData } from './types/analyzer-types';
import { useTomAssistant } from './hooks/useTomAssistant';
import TomROIForm from './TomROIForm';
import TomROIResults from './results/TomROIResults';
import AnalysisLoading from './results/AnalysisLoading';

interface TomROIAnalyzerProps {
  showBackButton?: boolean;
  backPath?: string;
  backText?: string;
}

const TomROIAnalyzer: React.FC<TomROIAnalyzerProps> = ({ 
  showBackButton = false,
  backPath = '/meus-rois',
  backText = 'Voltar para Meus ROIs'
}) => {
  const isMobile = useIsMobile();
  const resultRef = useRef<HTMLDivElement>(null);
  const navigate = useNavigate();
  const { user } = useAuth();
  const { 
    isLoading: isAnalysisLoading,
    progress,
    analyzeROI,
    apiStatus,
  } = useTomAssistant();

  const [currentStep, setCurrentStep] = useState(1);
  const totalSteps = 3;
  const [showLoadingScreen, setShowLoadingScreen] = useState(false);
  const [result, setResult] = useState<ROIAnalysisResult | null>(null);
  const [propertyData, setPropertyData] = useState<PropertyData | null>(null);
  const [logoPreviewUrl, setLogoPreviewUrl] = useState<string | null>(null);

  const methods = useForm<TomPropertyAnalysisInput>({
    resolver: zodResolver(tomPropertyAnalysisSchema),
    mode: 'onChange',
    defaultValues: {
      projectName: '',
      location: '',
      modelType: '',
      bedrooms: 0,
      hasPool: false,
      purchasePrice: 0,
      investmentType: 'cash',
      downPaymentPercent: 0,
      downPaymentValue: 0,
      closingCostsValue: 0,
      decorationCostType: 'percentage',
      decorationCostValue: 0,
      annualOccupancyRate: 75,
      brokerLogoUrl: null
    },
  });

  const onSubmit = async (data: TomPropertyAnalysisInput) => {
    if (!user) {
      console.error('User not authenticated');
      return;
    }

    try {
      setShowLoadingScreen(true);
      const response = await analyzeROI(data);
      setResult(response.result);
      setPropertyData(response.propertyData);
        if (resultRef.current) {
          resultRef.current.scrollIntoView({ behavior: 'smooth' });
      }
    } catch (error) {
      console.error('Erro ao analisar ROI:', error);
    } finally {
      setShowLoadingScreen(false);
    }
  };

  const handleReset = () => {
    setResult(null);
    setPropertyData(null);
    methods.reset();
    setCurrentStep(1);
  };

  const handleLogoChange = (file: File | null) => {
    if (file) {
      const url = URL.createObjectURL(file);
      setLogoPreviewUrl(url);
    } else {
      setLogoPreviewUrl(null);
    }
  };

  if (result && propertyData) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-white to-blue-50 p-4 md:p-8">
        <div className="max-w-2xl mx-auto">
          <div ref={resultRef}>
            <TomROIResults 
              result={result}
              propertyData={propertyData}
              onNewAnalysis={handleReset}
              onSaveAsPDF={() => {
                if (resultRef.current) {
                  // TODO: Implement PDF export
                }
              }}
              onSaveAsImage={() => {
                if (resultRef.current) {
                  // TODO: Implement image export
                }
              }}
              showBackButton={showBackButton}
              backPath={backPath}
              backText={backText}
            />
          </div>
        </div>
      </div>
    );
  }

  return (
    <ErrorBoundary>
      <div className={`min-h-screen bg-gradient-to-br from-white to-blue-50 ${isMobile ? 'p-3' : 'p-6'}`}>
        <div className="max-w-2xl mx-auto">
          {showBackButton && (
              <Button 
                variant="outline" 
              className="mb-4" 
                onClick={() => navigate(backPath)}
              >
              <ArrowLeft className="mr-2 h-4 w-4" /> {backText}
              </Button>
          )}

            <FormProvider {...methods}>
            {showLoadingScreen ? (
              <AnalysisLoading 
                stage={progress?.stage || "running-assistant"}
                percentage={progress?.percentage || 45}
                onRetry={() => {
                  setShowLoadingScreen(false);
                  methods.handleSubmit(onSubmit)();
                }}
              />
            ) : (
              <form onSubmit={methods.handleSubmit(onSubmit)} className="space-y-6">
                <TomROIForm 
                  onSubmit={onSubmit}
                  isFormProcessing={isAnalysisLoading}
                  onLogoChange={handleLogoChange}
                  logoPreviewUrl={logoPreviewUrl}
                      apiStatus={apiStatus}
                    />
              </form>
            )}
            </FormProvider>

          <div ref={resultRef} />
        </div>
      </div>
    </ErrorBoundary>
  );
};

export default TomROIAnalyzer;
